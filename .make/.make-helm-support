#!/usr/bin/env bash

# Shellscript support function file for Helm Chart Make targets

# Find and load the release support script
CURRENT_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
. ${CURRENT_SCRIPT_DIR}/.make-release-support

# Lint Helm Charts in charts/<subdirs>
function helmChartLint() {
	if [ -z "$1" ] ; then
		echo "helmChartLint: Missing HELM_CHARTS"
        exit 1
	else
        HELM_CHARTS="$1"
	fi

  BASE=$(pwd)
  mkdir -p build/reports
  cd charts
	for CHART in ${HELM_CHARTS}; do
		echo "helmChartLint: Building ${CHART}"
    if [ -f "${CHART}/Chart.lock" ]; then 
      yq --indent 0 '[.dependencies.[] | select(.repository | test("^file:") | not)] | map(["helm", "repo", "add", .name, .repository] | join(" ")) | .[]' "${CHART}/Chart.lock" | sh --
    fi
		helm dependency build ${CHART}
    # Colored collapsed text section to highlight it
    echo "helmChartLint: Linting ${CHART} yaml files. \u001b[33;1m Expand to see the report. Note that these are all ignored!\u001b[0m"
    # More tolerant line-length check
    collapsed_gitlab_section "yamllint-report-${CHART}" "${CHART} yamllint report" "yamllint -d '{extends: default, rules: {line-length: {max: 120, level: warning}}}' ${CHART} || true"
  done

	helm lint ${HELM_CHARTS}
  retVal=$?
	LINTING_OUTPUT=$(helm lint ${HELM_CHARTS} 2>&1 | grep 'Error ' -c | tail -1)
	echo "<testsuites><testsuite errors=\"${LINTING_OUTPUT}\" failures=\"0\" name=\"helm-lint\" skipped=\"0\" tests=\"0\" time=\"0.000\" timestamp=\"$(date)\"> </testsuite> </testsuites>" > ../build/reports/linting-charts.xml
  cd ${BASE}
  exit ${retVal}
}

# Lint helmfile
function helmfileLint(){
	if [ -z "$1" ] ; then
		echo "helmfileLint: Missing HELM_CHARTS"
        exit 1
	else
        HELM_CHARTS="$1"
	fi

  BASE=$(pwd)
  mkdir -p build/reports
  rm ${BASE}/build/helmfile.errors ${BASE}/build/helmfile.lint || true
  touch ${BASE}/build/helmfile.lint
  cd charts
  retVal=0
	for CHART in ${HELM_CHARTS}; do
    HELMFILE_DATA=$(ls -R ${CHART} | grep -Eo "helmfile\.(d|yml|yaml|yaml.gotmpl|yml.gotmpl)")
    if [ ! -z "${HELMFILE_DATA}" ]; then
      echo "helmfile data $HELMFILE_DATA"
      # Colored collapsed text section to highlight it
      echo "helmfileLint: Linting ${CHART} yaml. \u001b[33;1m Expand to see the report. Note that these are all ignored!\u001b[0m"
      # More tolerant line-length check
      collapsed_gitlab_section "yamllint-report-${CHART}" "${CHART} yamllint report" "yamllint -d '{extends: default, rules: {line-length: {max: 120, level: warning}}}' ${CHART} || true"

      # helmfile lint
      cd ${CHART}
      set -o pipefail
      helmfile lint 2>&1 | tee -a ${BASE}/build/helmfile.lint
      lint_ret_val=$?
      if [ ${lint_ret_val} -ne 0 ]; then
        echo "1 failed" >> ${BASE}/build/helmfile.lint
        retVal=${lint_ret_val}
      fi
      cd -
    fi
  done
  grep ".*failed$" ${BASE}/build/helmfile.lint | sed "s#.*\([0-9]\+\) chart.*failed#\1#" >> ${BASE}/build/helmfile.errors
  TOTAL_ERRORS=$(awk '{ sum += $1 } END { print sum }' ${BASE}/build/helmfile.errors)
  rm ${BASE}/build/helmfile.errors ${BASE}/build/helmfile.lint
	echo "<testsuites><testsuite errors=\"${TOTAL_ERRORS}\" failures=\"0\" name=\"helmfile-lint\" skipped=\"0\" tests=\"0\" time=\"0.000\" timestamp=\"$(date)\"> </testsuite> </testsuites>" > ../build/reports/linting-helmfile.xml
  cd ${BASE}
  exit ${retVal}
}

# Publish Helm Chart
function helmChartPublish() {
	if [ -z "$1" ] ; then
		echo "helmChartPublish: Missing HELM_CHARTS_TO_PUBLISH"
        exit 1
    fi
    HELM_CHARTS_TO_PUBLISH="$1"

    BASE=$(pwd)

    if [ -z "$CAR_HELM_REPOSITORY_URL" ]
    then
        CAR_HELM_REPOSITORY_URL="https://artefact.skao.int/repository/helm-internal"
    fi

    if [[ -d charts ]]; then
        echo "helmChartPublish: The charts in the 'charts' directory:"
        ls -ald charts/*
    else
        echo "helmChartPublish: No charts directory found"
    fi

    # Validate charts
    if [[ "$CI_PROJECT_NAME" = "ska-skampi" ]] && [[ -v CI_COMMIT_TAG ]]; then
        echo "helmChartPublish: special checks for Skampi"
        for chart in $HELM_CHARTS_TO_PUBLISH; do
            echo "helmChartPublish: ######## Validating $chart version #########"
            version=$(grep -oP '(?<=^version:\s)[^:]*' charts/$chart/Chart.yaml)
            app_version=$(grep -oP '(?<=^appVersion:\s)[^:]*' charts/$chart/Chart.yaml)
            if [[ "$version" == *"-"* ]] || [[ "$app_version" == *"-"* ]]; then
                echo "helmChartPublish: Create Merge Request with non-dirty version numbers for the Umbrella Charts - aborting"
                exit 1
            fi
        done
    elif [[ "$CI_PROJECT_NAME" = "ska-skampi" ]] && [[ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]]; then
        echo "helmChartPublish: [ska-skampi] looping at HELM_CHARTS_TO_PUBLISH=${HELM_CHARTS_TO_PUBLISH}"
        for chart in $HELM_CHARTS_TO_PUBLISH; do
            echo "helmChartPublish: ######## Validating $chart version #########"
            version=$(grep -oP '(?<=^version:\s)[^:]*' charts/$chart/Chart.yaml)
            app_version=$(grep -oP '(?<=^appVersion:\s)[^:]*' charts/$chart/Chart.yaml)
            if [[ "$version" != *"-"* ]] || [[ "$app_version" != *"-"* ]]; then
                echo "helmChartPublish: Change Umbrella charts to a dirty version while working on a branch - aborting"
                exit 1
            fi
        done
    fi

    # # install helm
    # curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    # chmod 700 get_helm.sh
    # ./get_helm.sh

    # create clean repo cache dir
    echo "helmChartPublish: setup the chart cache"
    [[ -d "chart-repo-cache" ]] && rm -rf chart-repo-cache
    mkdir -p ./chart-repo-cache

    # add SKA Helm Repository
    helm repo add skatelescope $CAR_HELM_REPOSITORY_URL --repository-cache ./chart-repo-cache
    helm repo list
    helm repo update
    helm search repo skatelescope
    helm search repo skatelescope >> ./chart-repo-cache/before

    # Find and load the metadata support script
    echo "helmChartPublish: generate the MANIFEST"
    CURRENT_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    . ${CURRENT_SCRIPT_DIR}/.make-metadata-support ; metadataGenerate "MANIFEST.skao.int"

    # if [ ! -f /usr/local/bin/extract-metadata.sh ]; then
    #     curl https://gitlab.com/ska-telescope/ska-k8s-tools/-/raw/master/docker/deploy/scripts/extract-metadata.sh -o extract-metadata.sh && chmod +x extract-metadata.sh
    #     ./extract-metadata.sh MANIFEST.skao.int
    # else
    #     /usr/local/bin/extract-metadata.sh MANIFEST.skao.int
    # fi

    # Package charts
    echo "helmChartPublish: Looping at charts"
    NEW_CHART_COUNT=0
    for chart in $HELM_CHARTS_TO_PUBLISH; do
        echo "helmChartPublish: Building $chart"
        if [ -f "charts/$chart/Chart.lock" ]; then 
          yq --indent 0 '[.dependencies.[] | select(.repository | test("^file:") | not)] | map(["helm", "repo", "add", .name, .repository] | join(" ")) | .[]' "charts/$chart/Chart.lock" | sh --
        fi
        helm dependency build charts/$chart
        echo "helmChartPublish: ######## Add METADATA on $chart #########"
        cp -n MANIFEST.skao.int charts/$chart
        echo "helmChartPublish: ######## Packaging $chart #########"
        helm package charts/"$chart" --destination ./chart-repo-cache
				build_res=$?
        echo "helmChartPublish: ######## Status $build_res ##"
				if [[ $build_res -ne 0 ]]; then
        	echo "helmChartPublish: chart packaging failed for $chart - aborting!"
					exit 1
				fi
        NEW_CHART_COUNT=$((NEW_CHART_COUNT+1))
    done

    # check for pre-existing files
    for file in $(cd chart-repo-cache; ls *.tgz); do
        echo "helmChartPublish: Checking if $file is already in index:"
        cat ./chart-repo-cache/skatelescope-index.yaml | grep "$file" && rm ./chart-repo-cache/$file && NEW_CHART_COUNT=$((NEW_CHART_COUNT - 1)) || echo "helmChartPublish: $file Not found in index 👍";
    done

    # exit script if no charts are to be uploaded
    [[ $NEW_CHART_COUNT > 0 ]] && echo "helmChartPublish: Found $NEW_CHART_COUNT charts ready to add to the SKA repository."

    # rebuild index
    helm repo index ./chart-repo-cache --merge ./chart-repo-cache/skatelescope-index.yaml

    for file in ./chart-repo-cache/*.tgz; do
        echo "helmChartPublish: ######### UPLOADING ${file##*/}";
        curl -v -u $CAR_HELM_USERNAME:$CAR_HELM_PASSWORD --upload-file ${file} $CAR_HELM_REPOSITORY_URL/${file##*/};
    done

    # what is this gratuitous sleep for! - waiting for Nexus to reindex
    sleep 2

    helm repo update
    helm search repo skatelescope >> ./chart-repo-cache/after
    helm search repo skatelescope

    echo "helmChartPublish: This publishing step brought about the following changes:"
    diff ./chart-repo-cache/before ./chart-repo-cache/after --color

    rm -rf ./chart-repo-cache

    echo "helmChartPublish: done."
    exit 0
}

# Build Helm Chart
function helmChartBuild() {
	if [ -z "$1" ] ; then
		echo "helmChartBuild: Missing HELM_CHARTS_TO_PUBLISH"
    exit 1
  fi
  HELM_CHARTS_TO_PUBLISH="$1"

	if [ -z "$HELM_CHARTS_CHANNEL" ] ; then
		echo "helmChartBuild: Missing HELM_CHARTS_CHANNEL"
    exit 1
  fi
  if [ -z "$VERSION" ] ; then
    echo "helmChartBuild: Missing VERSION - cannot set package versions"
    exit 1
  fi

  BASE=$(pwd)

  if [[ -z "${HELM_BUILD_PUSH_SKIP}" ]]; then
    # Skip pipeline related checks as they are not necessary
    if [ -z "$HELM_REPOSITORY_URL" ]
    then
      if [ -z "$CI_PROJECT_ID" ] ; then
        echo "helmChartBuild: Missing CI_PROJECT_ID - cannot construct publish URL"
        exit 1
      fi
      HELM_REPOSITORY_URL="https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/helm/api/${HELM_CHARTS_CHANNEL}/charts"
    fi
    echo "helmChartBuild: going to publish ${HELM_CHARTS_TO_PUBLISH}/${VERSION} to ${HELM_REPOSITORY_URL}/${HELM_CHARTS_CHANNEL}"

    if [ -z "$CI_JOB_TOKEN" ] ; then
      echo "helmChartBuild: Missing CI_JOB_TOKEN - cannot authenticate for publish"
      exit 1
    fi
  else
    # Settong the repo url as empty as it's expected in other places in the function
    HELM_REPOSITORY_URL=""
  fi

  if [[ -d charts ]]; then
    echo "helmChartBuild: The charts in the 'charts' directory:"
    ls -ald charts/*
  else
    echo "helmChartBuild: No charts directory found"
    exit 0
  fi

  # Set chart versions


  # Check if this is a dev build
  if [[ "${HELM_REPOSITORY_URL}" == *gitlab.com* ]]; then
    echo "helmChartBuild: Gitlab package registry (${HELM_REPOSITORY_URL}) is used to publish as the image is for development use"
    HELM_CHART_VERSION="${VERSION}-dev.c$CI_COMMIT_SHORT_SHA"  #"-" is used as "+" causes the docker building process to fail
  else
    HELM_CHART_VERSION="${VERSION}"
  fi
  # HELM_CHART_VERSION=${VERSION}
  # if [[ -z "$CI_COMMIT_TAG" ]] && [[ "$CI_COMMIT_REF_NAME" != "$CI_DEFAULT_BRANCH" ]]; then
  # # not a tag and not default branch - set the version to $VERSION-dev.c$CI_COMMIT_SHORT_SHA
  #     HELM_CHART_VERSION="${VERSION}-dev.c$CI_COMMIT_SHORT_SHA"
  # fi
  echo "helmChartBuild: overriding image registry in chart to ${CAR_OCI_REGISTRY_HOST}"
  setHelmChartImageRegistry "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}" "${HELM_CHARTS_TO_PUBLISH}"

  echo "helmChartBuild: setting chart versions to ${HELM_CHART_VERSION}"
  setHelmRelease ${HELM_CHART_VERSION} "${HELM_CHARTS_TO_PUBLISH}"

	# Update references to local charts so that versions match
  updateHelmDeps ${HELM_CHART_VERSION} "${HELM_CHARTS_TO_PUBLISH}"

  # create clean repo cache dir
  echo "helmChartBuild: setup the chart cache"
  [[ -d "chart-repo-cache" ]] && rm -rf chart-repo-cache
  mkdir -p ./chart-repo-cache

  # Find and load the metadata support script
  if [[ -z "$HELM_BUILD_PUSH_SKIP" ]]; then 
    echo "helmChartBuild: generate the MANIFEST"
    CURRENT_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    . ${CURRENT_SCRIPT_DIR}/.make-metadata-support ; metadataGenerate "MANIFEST.skao.int"
  fi

  # Package charts
  echo "helmChartBuild: Looping at charts"
  for chart in $HELM_CHARTS_TO_PUBLISH; do
      echo "helmChartBuild: Building $chart"
      if [ -f "charts/$chart/Chart.lock" ]; then 
        yq --indent 0 '[.dependencies.[] | select(.repository | test("^file:") | not)] | map(["helm", "repo", "add", .name, .repository] | join(" ")) | .[]' "charts/$chart/Chart.lock" | sh --
      fi
		  helm dependency build charts/$chart
      if [[ -z "${HELM_BUILD_PUSH_SKIP}" ]]; then
        echo "helmChartBuild: ######## Add METADATA on $chart #########"
        cp -n MANIFEST.skao.int charts/$chart
      fi
      echo "helmChartBuild: ######## Packaging $chart #########"
      helm package charts/"$chart" --destination ./chart-repo-cache
			build_res=$?
      echo "helmChartBuild: ######## Status $build_res ##"
			if [[ $build_res -ne 0 ]]; then
      	echo "helmChartBuild: chart packaging failed for $chart - aborting!"
				exit 1
			fi
  done

  # check for pre-existing files
  for file in $(cd chart-repo-cache; ls *.tgz); do
      echo "helmChartBuild: publishing $file"
      if [[ -z "${HELM_BUILD_PUSH_SKIP}" ]]; then
          curl --request POST \
          --form "chart=@chart-repo-cache/$file" \
          --user "gitlab-ci-token:$CI_JOB_TOKEN" \
          ${HELM_REPOSITORY_URL}
          curl_res=$?
          if [[ $curl_res -eq 0 ]]; then
              echo "helmChartBuild: $file published to ${HELM_REPOSITORY_URL}"
          else
              echo "helmChartBuild: publish of $file to ${HELM_REPOSITORY_URL} failed - aborting"
              exit 1
          fi
      else
          echo "helmChartBuild: skipped push HELM_BUILD_PUSH_SKIP=${HELM_BUILD_PUSH_SKIP}"
      fi
  done

  echo "helmChartBuild: done."
	rm -rf ./chart-repo-cache
  exit 0
}

# Check Helm Chart dependencies
function helmChartCheckDependencies() {
	if [ -z "$1" ] ; then
		echo "helmChartCheckDependencies: Missing HELM_CHARTS_TO_PUBLISH"
    exit 1
  fi
  HELM_CHARTS_TO_PUBLISH="$1"
  BASE=$(pwd)

  if [[ -d charts ]]; then
    echo "helmChartCheckDependencies: The charts in the 'charts' directory:"
    ls -ald charts/*
  else
    echo "helmChartCheckDependencies: No charts directory found"
    exit 0
  fi

  if [ -z "$CAR_HELM_REPOSITORY_URL" ]
  then
    CAR_HELM_REPOSITORY_URL="https://artefact.skao.int/repository/helm-internal"
  fi

  mkdir -p ./chart-repo-cache
  helm repo add skatelescope $CAR_HELM_REPOSITORY_URL
  helm repo update

  for CHART in $HELM_CHARTS_TO_PUBLISH; do
    echo -e "\nChecking dependencies for $CHART:"
    helm dependency list charts/$CHART > ./chart-repo-cache/$CHART.deps
    grep -i https:// ./chart-repo-cache/$CHART.deps | grep -v "dev." |
    while read LINE; do
      DEP_CHART=$(echo $LINE | awk '{print $1}')
      DEP_CHART_VERSION=$(echo $LINE | awk '{print $2}')
      DEP_CHART_REPO=$(echo $LINE | awk '{print $3}')
      DEP_CHART_INFO=$(helm search repo $DEP_CHART | grep -E "$DEP_CHART[[:space:]]" | head -n 1)
      if [ -z "$DEP_CHART_INFO" ]; then
        echo "helmChartCheckDependencies: Failed to find information about $DEP_CHART. Make sure you have added relevant chart repositories."
      else
        LATEST_CHART_VERSION=$(echo $DEP_CHART_INFO | awk '{print $2}')
        if [ $(semverCompare $DEP_CHART_VERSION $LATEST_CHART_VERSION) -eq 0 ]; then
          echo -e "\033[1;32m$DEP_CHART $DEP_CHART_VERSION is up to date!\033[0m"
        else
          echo -e "\033[0;31m$DEP_CHART $DEP_CHART_VERSION is outdated. Version '$LATEST_CHART_VERSION' is available\033[0m"
        fi
      fi
    done
  done

  echo -e "\nhelmChartCheckDependencies: done."
  rm -rf ./chart-repo-cache
  exit 0
}