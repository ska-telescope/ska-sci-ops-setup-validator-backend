#!/usr/bin/env bash

# Shellscript support function file for Dependency Make targets

# Update dependencies using skart and poetry
function depsUpdate() {
  if [[ "$SKART_TOML_EXISTS" == "1" ]]; then

    if [ -z "$1" ]; then
      echo "depsUpdate: running skart in development update mode."
      MODE=
    elif [[ "$1" == "release" ]]; then
      echo "depsUpdate: using skart with '--mode release'."
      MODE="--mode release"
    else
      echo "depsUpdate: Unknown skart mode."
      exit 1
    fi

    skart update $MODE --dep-file $SKART_DEPS_FILE --wait=$SKART_WAIT --requery=$SKART_REQUERY

  else
    echo "depsUpdate warning: $SKART_DEPS_FILE does not exist. Skipping 'skart update'"
  fi

  if [[ "$PYPROJECT_TOML_EXISTS" == "1" ]]; then
    poetry update --lock
  else
    echo "depsUpdate error: pyproject.toml file does not exist"
	  exit 1
	fi
}

# wait for pipeline to finish by executing the `skart get` command
function pipelineWait() {
  if [[ $ARTEFACT_TYPE == "python" ]]; then
    dep_type="gitlab:python"
  elif [[ $ARTEFACT_TYPE == "oci" ]]; then
    dep_type="gitlab:oci-image"
  else
    echo "artifact_type $ARTEFACT_TYPE not known."
  fi

  skart get $PROJECT_NAME --wait=$SKART_WAIT --dep-config \
  "[dep.$PROJECT_NAME]
  dep_type = '$dep_type'
  project = '$PROJECT_PATH'
  $1"
}

# Full patch release process
function depsPatchRelease() {
  if [ -z "$PROJECT_NAME" ]; then
    echo "PROJECT_NAME environment variable has to be provided."
    exit 1
  fi
  if [ -z "$PROJECT_PATH" ]; then
    echo "PROJECT_PATH environment variable has to be provided."
    exit 1
  fi
  if [ -z "$ARTEFACT_TYPE" ]; then
    echo "ARTEFACT_TYPE environment variable has to be provided."
    exit 1
  fi

  if [ -z "$GIT_REMOTE" ]; then
    GIT_REMOTE="origin"
  fi

  UPDATE_DEPS='depsUpdate release'

  echo "depsPatchRelease: Updating dependencies with skart and poetry."
  if ! ${UPDATE_DEPS}; then
    errorCode=$?
    echo "depsPatchRelease: Failed to update requirements."
    exit $errorCode
  fi

  CURRENT_TAG=`git describe --abbrev=0`

  echo "depsPatchRelease: 'deps-update-release' was successful."
  echo "depsPatchRelease: Checking for differences in git repository against current tag ($CURRENT_TAG)"
  if git diff --quiet $CURRENT_TAG; then
    echo "depsPatchRelease: No differences found. Exiting."
    exit 0
  fi

  echo "depsPatchRelease: Differences found in the repository. Bumping patch version."

  changed_files=`git diff --name-only $CURRENT_TAG`
  git add $changed_files
  git commit -a -m "ST-1807: updating dependencies with skart and poetry ($PROJECT_NAME)"

  if ! make bump-patch-release; then
    errorCode=$?
    echo "depsPatchRelease: 'make bump-patch-release' failed."
    exit $errorCode
  fi

  echo "depsPatchRelease: 'make bump-patch-release' was successful. Creating git tag."
  if ! make create-git-tag AUTO_RELEASE=$AUTO_RELEASE JIRA_TICKET="ST-1807"; then
    errorCode=$?
    echo "depsPatchRelease: 'make create-git-tag' failed. Note that the version has been bumped and changes have already been committed."
    exit $errorCode
  fi

  echo "depsPatchRelease: 'make create-git-tag' was successful. Pushing git tag."
  tag=`make show-version`

  if ! git push $GIT_REMOTE $tag; then
    errorCode=$?
    echo "depsPatchRelease: Failed to push git tag. Note that the tag has been created locally and changes are committed."
    exit $errorCode
  fi

  echo "depsPatchRelease: Git tag $tag was successfully pushed. Waiting for CI pipeline to pass."

  sleep 5 # give enough time for changes to trigger a pipeline
  if ! pipelineWait "tag='$tag'"; then
    errorCode=$?
    echo "depsPatchRelease: 'skart get' command failed. Note that the tag and changes have been pushed to remote."
    exit $errorCode
  fi

  echo "depsPatchRelease: CI pipeline finished running. Pushing changes"

  if git push; then
    echo "depsPatchRelease: Pushed changes to remote."
    echo "depsPatchRelease: Finished updating dependencies and releasing version $tag of $PROJECT_NAME."
  else
    errorCode=$?
    echo "depsPatchRelease: Failed to push latest changes. Note that the tag and earlier changes have been already pushed to remote."
    exit $errorCode
  fi
}

# Development branch
function depsDevelBranch() {
  if [ -z "$PROJECT_NAME" ]; then
    echo "depsDevelBranch: PROJECT_NAME environment variable has to be provided."
    exit 1
  fi
  if [ -z "$PROJECT_PATH" ]; then
    echo "depsDevelBranch: PROJECT_PATH environment variable has to be provided."
    exit 1
  fi
  if [ -z "$ARTEFACT_TYPE" ]; then
    echo "depsDevelBranch: ARTEFACT_TYPE environment variable has to be provided."
    exit 1
  fi
  if [ -z "$BRANCH_NAME" ]; then
    echo "depsDevelBranch: BRANCH_NAME environment variable has to be provided."
    exit 1
  else
    # Check if branch exists locally
    if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then
      echo "depsDevelBranch: Requested branch $BRANCH_NAME exists locally."
      git checkout $BRANCH_NAME
    else
      # If it doesnâ€™t exist locally, check the remote
      if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
        echo "depsDevelBranch: Branch $BRANCH_NAME exists on remote. Checking it out."
        git checkout -t origin/$BRANCH_NAME
      else
        # If not found on remote, create a new branch
        echo "depsDevelBranch: Branch $BRANCH_NAME does not exist locally or on remote. Creating new branch."
        if ! git checkout -b $BRANCH_NAME; then 
          errorCode=$?
          echo "depsDevelBranch: Unable to create new branch $BRANCH_NAME"
          exit $errorCode
        else
          echo "depsDevelBranch: Branch $BRANCH_NAME created"
        fi
      fi
    fi
  fi

  # Fetch the latest changes before pushing
  if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
    echo "depsDevelBranch: Fetching latest changes before pushing to remote."
    if ! git pull --rebase origin $BRANCH_NAME; then
      errorCode=$?
      echo "depsDevelBranch: Failed to rebase with the latest changes from remote."
      exit $errorCode
    fi
  else
    echo "depsDevelBranch: Branch $BRANCH_NAME does not exist on remote, skipping pull with rebase."
  fi

  UPDATE_DEPS='depsUpdate'

  echo "depsDevelBranch: Updating dependencies with skart and poetry."
  if ! ${UPDATE_DEPS}; then
    errorCode=$?
    echo "depsDevelBranch: Failed to update requirements."
    exit $errorCode
  fi
  echo "depsDevelBranch: 'deps-update' was successful - pushing branch to Gitlab."

  changed_files=`git diff --name-only $BRANCH_NAME`
  git add $changed_files

  message=`echo $BRANCH_NAME | awk -F'-' -v name=$PROJECT_NAME \
  '{print " " toupper($1)"-"($2)": depsDevelBranch updated dependencies for project "  name}'`
  
  if ! git commit -m "$message"; then
      echo "depsDevelBranch No dependency changes to push - exiting."
      exit 0
  fi
     
  if ! git push --set-upstream origin $BRANCH_NAME; then
      errorCode=$?
      echo "depsDevelBranch: changes not pushed to Gitlab."
      exit $errorCode
  fi

  echo "depsDevelBranch: Branch was successfully pushed. Waiting for CI pipeline to run."

  sleep 10 # give enough time for changes to trigger a pipeline
  if ! pipelineWait; then
    errorCode=$?
    echo "depsDevelBranch: 'skart get' command failed. Repository $PROJECT_NAME - branch $BRANCH_NAME."
    echo "depsDevelBranch: Pipeline may have failed. See skart messages."
    exit $errorCode
  fi

  echo "depsDevelBranch: CI pipeline finished running."
}